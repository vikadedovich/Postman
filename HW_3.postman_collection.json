{
	"info": {
		"_postman_id": "6aaec6bd-8ed2-4a14-9b9c-219bbbe869c2",
		"name": "HW_3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19694575"
	},
	"item": [
		{
			"name": "HW_3",
			"item": [
				{
					"name": "/login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let respData = pm.response.json();",
									"",
									"pm.environment.set(\"token\", respData.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "login",
									"value": "archi@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "1234qwerty",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/login",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user_info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1) Статус код 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"let respData = pm.response.json();",
									"// 2) Проверка структуры json в ответе.",
									"var schema = {",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"person\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"u_age\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"u_name\": {",
									"          \"type\": \"array\",",
									"          \"items\": [",
									"            {",
									"              \"type\": \"string\"",
									"            },",
									"            {",
									"              \"type\": \"integer\"",
									"            },",
									"            {",
									"              \"type\": \"integer\"",
									"            }",
									"          ]",
									"        },",
									"        \"u_salary_1_5_year\": {",
									"          \"type\": \"integer\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"u_age\",",
									"        \"u_name\",",
									"        \"u_salary_1_5_year\"",
									"      ]",
									"    },",
									"    \"qa_salary_after_12_months\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"qa_salary_after_6_months\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"start_qa_salary\": {",
									"      \"type\": \"integer\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"person\",",
									"    \"qa_salary_after_12_months\",",
									"    \"qa_salary_after_6_months\",",
									"    \"start_qa_salary\"",
									"  ]",
									"};",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"    pm.expect(respData).to.have.jsonSchema(schema);",
									"});",
									"",
									"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.",
									"let salary = respData.start_qa_salary;",
									"pm.test(\"qa_salary_after_6_months = salary*2 \", () => {",
									"    pm.expect(respData.qa_salary_after_6_months).to.eql(salary*2);",
									"});",
									"pm.test(\"qa_salary_after_12_months = salary*2.9 \", () => {",
									"    pm.expect(respData.qa_salary_after_12_months).to.eql(salary*2.9);",
									"});",
									"pm.test(\"u_salary_1_5_year = salary*4 \", () => {",
									"    pm.expect(respData.person.u_salary_1_5_year).to.eql(salary*4);",
									"});",
									"// 4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user",
									"let salary_1 = respData.person.u_salary_1_5_year;",
									"pm.environment.set(\"salary_1_5\", salary_1);",
									"console.log(salary_1);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"age\":30,\n    \"salary\": 1000,\n    \"name\": \"Archi\",\n    \"auth_token\": \"{{token}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info"
							]
						}
					},
					"response": []
				},
				{
					"name": "/new_data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1) Статус код 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"// 2) Проверка структуры json в ответе.",
									"let respData = pm.response.json();",
									"let schema = {",
									"    \"type\": \"object\",",
									"  \"properties\": {",
									"    \"age\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"name\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"salary\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"integer\"",
									"        },",
									"        {",
									"          \"type\": \"string\"",
									"        },",
									"        {",
									"          \"type\": \"string\"",
									"        }",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"age\",",
									"    \"name\",",
									"    \"salary\"",
									"  ]",
									"};",
									"pm.test(\"Schema is valid\", () => {",
									"    pm.expect(respData).to.have.jsonSchema(schema);",
									"});",
									"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.",
									"let reqData = request.data;",
									"pm.test(\"salary*2 = 1st item of array\", () => {",
									"    pm.expect(+respData.salary[1]).to.eql(reqData.salary*2)",
									"});",
									"pm.test(\"salary*3 = 2d item of array\", () => {",
									"    pm.expect(+respData.salary[2]).to.eql(reqData.salary*3)",
									"});",
									"// 4) проверить, что 2-й элемент массива salary больше 1-го и 0-го",
									"pm.test(\"2d item of array salary more than 0-item\", () => {",
									"    pm.expect(+respData.salary[2]).is.greaterThan(respData.salary[0]);",
									"    console.log(respData.salary[0] + \" < \" + respData.salary[2]);",
									"});",
									"",
									"pm.test(\"2d item of array salary more than 1-item\", () => {",
									"    pm.expect(+respData.salary[2]).is.greaterThan(+respData.salary[1]);",
									"    console.log(respData.salary[1] + \" < \" + respData.salary[2]);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "30",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "1000",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Archi",
									"type": "text"
								},
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/new_data",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"new_data"
							]
						}
					},
					"response": []
				},
				{
					"name": "/test_pet_info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1) Статус код 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"// 2) Проверка структуры json в ответе.",
									"let respData = pm.response.json();",
									"let schema = {",
									"    \"type\": \"object\",",
									"  \"properties\": {",
									"    \"age\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"daily_food\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"daily_sleep\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"name\": {",
									"      \"type\": \"string\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"age\",",
									"    \"daily_food\",",
									"    \"daily_sleep\",",
									"    \"name\"",
									"  ]",
									"};",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"    pm.expect(respData).to.have.jsonSchema(schema);",
									"});",
									"// 3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.",
									"let reqData = request.data;",
									"pm.test(\"daily_food = weight * 0.012\", () => {",
									"    pm.expect(respData.daily_food).to.eql(reqData.weight*0.012)",
									"});",
									"",
									"pm.test(\"daily_sleep = weight * 2.5\", () => {",
									"    pm.expect(respData.daily_sleep).to.eql(reqData.weight*2.5)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "weight",
									"value": "30",
									"type": "text"
								},
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/test_pet_info",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"test_pet_info"
							]
						}
					},
					"response": []
				},
				{
					"name": "/get_test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1) Статус код 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"// 2) Проверка структуры json в ответе.",
									"let respData =pm.response.json();",
									"let schema = {",
									"    \"type\": \"object\",",
									"  \"properties\": {",
									"    \"age\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"family\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"children\": {",
									"          \"type\": \"array\",",
									"          \"items\": [",
									"            {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"integer\"",
									"                }",
									"              ]",
									"            },",
									"            {",
									"              \"type\": \"array\",",
									"              \"items\": [",
									"                {",
									"                  \"type\": \"string\"",
									"                },",
									"                {",
									"                  \"type\": \"integer\"",
									"                }",
									"              ]",
									"            }",
									"          ]",
									"        },",
									"        \"u_salary_1_5_year\": {",
									"          \"type\": \"integer\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"children\",",
									"        \"u_salary_1_5_year\"",
									"      ]",
									"    },",
									"    \"name\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"salary\": {",
									"      \"type\": \"integer\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"age\",",
									"    \"family\",",
									"    \"name\",",
									"    \"salary\"",
									"  ]",
									"};",
									"pm.test(\"Schema is valid\", () => {",
									"    pm.expect(respData).to.have.jsonSchema(schema);",
									"});",
									"// 3) Проверить что занчение поля name = значению переменной name из окружения",
									"pm.test(\"response name = variable name\", () => {",
									"    pm.expect(respData.name).to.eql(pm.environment.get(\"name\"));",
									"});",
									"// 4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age",
									"pm.test(\"response age = variable age\", () => {",
									"    pm.expect(+respData.age).to.eql(pm.environment.get(\"age\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary_1_5}}",
									"type": "text"
								},
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "auth_token ",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/get_test_user",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"get_test_user"
							]
						}
					},
					"response": []
				},
				{
					"name": "/currency",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1) Можете взять любой объект из присланного списка, используйте js random.",
									"// В объекте возьмите Cur_ID и передать через окружение в следующий запрос.",
									"",
									"let respData = pm.response.json();",
									"let rand = Math.floor(Math.random() * respData.length);",
									"let resp_Cur_ID = respData[rand].Cur_ID;",
									"let resp_Cur_Abbreviation = respData[rand].Cur_Abbreviation;",
									"console.log(resp_Cur_ID);",
									"console.log(resp_Cur_Abbreviation);",
									"pm.environment.set(\"cur_id\", resp_Cur_ID);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "http://54.157.99.22:80/currency",
							"protocol": "http",
							"host": [
								"54",
								"157",
								"99",
								"22"
							],
							"port": "80",
							"path": [
								"currency"
							]
						}
					},
					"response": []
				},
				{
					"name": "/curr_byn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1) Статус код 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"// 2) Проверка структуры json в ответе.",
									"let schema = {",
									"    \"type\": \"object\",",
									"  \"properties\": {",
									"    \"Cur_Abbreviation\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"Cur_ID\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"Cur_Name\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"Cur_OfficialRate\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"Cur_Scale\": {",
									"      \"type\": \"integer\"",
									"    },",
									"    \"Date\": {",
									"      \"type\": \"string\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"Cur_Abbreviation\",",
									"    \"Cur_ID\",",
									"    \"Cur_Name\",",
									"    \"Cur_OfficialRate\",",
									"    \"Cur_Scale\",",
									"    \"Date\"",
									"  ]",
									"};",
									"let respData = pm.response.json();",
									"pm.test(\"Schema is valid\", () => {",
									"    pm.expect(respData).to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/curr_byn",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"curr_byn"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}