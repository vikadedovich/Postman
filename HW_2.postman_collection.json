{
	"info": {
		"_postman_id": "c4e6a36f-546f-4eaf-bba8-b5f93b370c8b",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19694575"
	},
	"item": [
		{
			"name": "HW_2",
			"item": [
				{
					"name": "/first",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!ss\")",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/first",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"first"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user_info_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1. Status code 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//2. Parse the response body into JSON.",
									"let respData = pm.response.json();",
									"console.log(respData);",
									"",
									"//3. Check that the name in the response is equal to the name from the request (enter the name manually).",
									"pm.test(\"Rsponse name equals request name\", function () {",
									"    pm.expect(respData.name).to.eql(\"Archi\")",
									"});",
									"",
									"//4. Check that the age in the response is equal to the age from the request (enter the age manually).",
									"pm.test(\"Response age equals request age\", function () {",
									"    pm.expect(respData.age).to.eql('30')",
									"});",
									"",
									"//5. Check that the salary in the response is equal to the salary from the request (enter the salary manually).",
									"pm.test(\"Response salary equals request salary\", function () {",
									"    pm.expect(respData.salary).to.eql(1000)",
									"});",
									"",
									"//6. Parse the request.",
									"let reqData = request.data;",
									"",
									"//7. Check that the name in the response is equal to the name from the request (get name from the request).",
									"pm.test(\"Rsponse name equals request name - 2 check\", function () {",
									"    pm.expect(respData.name).to.eql(reqData.name)",
									"});",
									"",
									"//8. Check that the age in the response is equal to the age from the request (get age from the request).",
									"pm.test(\"Response age equals request age - 2 check\", function () {",
									"    pm.expect(reqData.age).to.eql(reqData.age)",
									"});",
									"",
									"//9. Check that the salary in the response is equal to the salary from the request (get salary from the request).",
									"pm.test(\"Response salary equals request salary - 2 check\", function () {",
									"    pm.expect(respData.salary).to.eql(+reqData.salary)",
									"});",
									"",
									"//10. Print the family parameter from the response to the console.",
									"console.log(respData.family);",
									"",
									"//11. Check that u_salary_1_5_year in the response is equal to salary Ã— 4 (get salary from the request).",
									"pm.test(\"Response u_salary_1_5_year equals salary*4\", function () {",
									"    pm.expect(respData.family.u_salary_1_5_year).to.eql(reqData.salary * 4)",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Archi",
									"type": "text"
								},
								{
									"key": "age",
									"value": "30",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "1000",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_3",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_3"
							]
						}
					},
					"response": []
				},
				{
					"name": "/object_info_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1. Status code is 200",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"})",
									"//2. Parse the response body in json.",
									"let respData = pm.response.json();",
									"//3. Parse the request.",
									"let reqData = pm.request.url.query.toObject();",
									"//4. Check that name in the response is equal to name from the request (get name from the request).",
									"pm.test('response name equals request name', function () {",
									"    pm.expect(respData.name).to.eql(reqData.name);",
									"})",
									"//5. Check that age in the response is equal to age from the request (get age from the request).",
									"pm.test('Response age equals request age', function () {",
									"    pm.expect(respData.age).to.eql(reqData.age);",
									"})",
									"//6.Check that salary in the response is equal to salary from the request (get salary from the request).",
									"pm.test('Response salary equals request salary', function () {",
									"    pm.expect(respData.salary).to.eql(+reqData.salary);",
									"})",
									"//7.Print the parameter family from the response to the console.",
									"console.log(respData.family)",
									"//8. Check that the parameter dog has the parameter name.",
									"",
									"pm.test(\"Dog has a parameter name\", function () {",
									"    pm.expect(respData.family.pets.dog.name).to.exist;",
									"});",
									"//9. Check that the parameter dog has the parameter age.",
									"pm.test('Dog has a parameter age', function () {",
									"    pm.expect(respData.family.pets.dog.age).to.exist;",
									"});",
									"//10.Check that the parameter name has the value Luky.",
									"pm.test('Parameter name equals Luky', function () {",
									"    pm.expect(respData.family.pets.dog.name).to.eql('Luky');",
									"})",
									"//11. Check that the parameter age has the value 4.",
									"pm.test('Parameter age equals 4', function () {",
									"    pm.expect(respData.family.pets.dog.age).to.eql(4);",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_3?name=Archi&age=30&salary=1000",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_3"
							],
							"query": [
								{
									"key": "name",
									"value": "Archi"
								},
								{
									"key": "age",
									"value": "30"
								},
								{
									"key": "salary",
									"value": "1000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/object_info_4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"// 2. Parse response body in json.",
									"let respData = pm.response.json();",
									"// 3. Parse the request.",
									"let reqData = pm.request.url.query.toObject();",
									"// 4. Check that the name in the response is equal to the name from the request (get name from the request).",
									"pm.test(\"Response name equals request name\", function () {",
									"    pm.expect(reqData.name).to.eql(respData.name)",
									"});",
									"// 5. Check that the age in the response is equal to the age from the request (get age from the request).",
									"pm.test(\"Response age equals request age\", function () {",
									"    pm.expect(respData.age).to.eql(+reqData.age)",
									"});",
									"// 6. Print the salary parameter from the request to the console.",
									"console.log(reqData.salary);",
									"// 7. Print the salary parameter from the response to the console.",
									"console.log(respData.salary);",
									"// 8. Print to the console the 0th element of the salary parameter from the response.",
									"console.log(respData.salary[0]);",
									"// 9. Print to the console the 1st element of the salary parameter from the response.",
									"console.log(respData.salary[1]);",
									"// 10. Print to the console the 2nd element of the salary parameter from the response.",
									"console.log(respData.salary[2]);",
									"// 11. Check that the 0th element of the salary parameter is equal to salary from the request (get salary from the request).",
									"pm.test(\"0-item of parameter salary response equals request salary\", function () {",
									"    pm.expect(respData.salary[0]).to.eql(+reqData.salary)",
									"});",
									"// 12. Check that the 1st element of the salary parameter is equal to salary * 2 from the request (get salary from the request).",
									"pm.test(\"1st-item of parameter salary response equals request salary*2\", function () {",
									"    pm.expect(+respData.salary[1]).to.eql(reqData.salary * 2)",
									"});",
									"// 13. Check that the 2nd element of the salary parameter is equal to salary * 3 from the request (get salary from the request).",
									"pm.test(\"2d-item of parameter salary response equals request salary*2\", function () {",
									"    pm.expect(+respData.salary[2]).to.eql(reqData.salary*3)",
									"});",
									"// 14. Create a variable name in the environment",
									"pm.environment.set(\"name\", \"Archi\");",
									"",
									"// 15. Create a variable age in the environment",
									"pm.environment.set(\"age\", 30);",
									"// 16. Create a variable salary in the environment",
									"pm.environment.set(\"salary\", 1000);",
									"",
									"// 20. Write a loop that will print the elements of the list from the salary parameter to the console in order.",
									"for ( let i = 0;  i < respData.salary.length; i++) {",
									"   console.log(respData.salary[i]);",
									"};",
									"",
									"// let arr = respData.salary;",
									"// arr.forEach(function(item, i, arr){",
									"//     console.log(`${item} this is ${i} item of the list`)",
									"// });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_4?name=Archi&age=30&salary=1000",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_4"
							],
							"query": [
								{
									"key": "name",
									"value": "Archi"
								},
								{
									"key": "age",
									"value": "30"
								},
								{
									"key": "salary",
									"value": "1000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/user_info_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Insert the salary parameter from the environment into the request.",
									"// 2. Insert the age parameter from the environment into age.",
									"// 3. Insert the name parameter from the environment into name.",
									"// 4. Send the request.",
									"// 5. Status code 200.",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"// 6. Parse the response body into JSON.",
									"let respData = pm.response.json();",
									"// 7. Parse the request.",
									"let reqData = request.data;",
									"// 8. Check that the JSON response contains the parameter start_qa_salary.",
									"pm.test(\"JSON response has start_qa_salary\", function () {",
									"    pm.expect(respData.start_qa_salary).to.exist;",
									"});",
									"// 9. Check that the JSON response contains the parameter qa_salary_after_6_months.",
									"pm.test(\"JSON response has qa_salary_after_6_months\", function () {",
									"    pm.expect(respData.qa_salary_after_6_months).to.exist;",
									"});",
									"// 10. Check that the JSON response contains the parameter qa_salary_after_12_months.",
									"pm.test(\"JSON response has qa_salary_after_12_months\", function () {",
									"    pm.expect(respData.qa_salary_after_12_months).to.exist;",
									"});",
									"// 11. Check that the JSON response contains the parameter qa_salary_after_1.5_year.",
									"pm.test(\"JSON response has qa_salary_after_1.5_year\", function () {",
									"    pm.expect(respData[\"qa_salary_after_1.5_year\"]).to.exist;",
									"});",
									"// 12. Check that the JSON response contains the parameter qa_salary_after_3.5_years.",
									"pm.test(\"JSON response has qa_salary_after_3.5_years\", function () {",
									"    pm.expect(respData[\"qa_salary_after_3.5_years\"]).to.exist;",
									"});",
									"",
									"// 13. Check that the JSON response contains the parameter person.",
									"pm.test(\"JSON response has person\", function () {",
									"    pm.expect(respData.person).to.exist;",
									"});",
									"// 14. Check that the parameter start_qa_salary is equal to salary from the request (get salary from the request).",
									"pm.test(\"start_qa_salary equals request salary\", function () {",
									"    pm.expect(respData.start_qa_salary).to.eql(+reqData.salary);",
									"});",
									"",
									"// 15. Check that the parameter qa_salary_after_6_months is equal to salary * 2 from the request (get salary from the request).",
									"pm.test(\"qa_salary_after_6_months equals request salary*2\", function () {",
									"    pm.expect(respData.qa_salary_after_6_months).to.eql(+reqData.salary*2);",
									"});",
									"// 16. Check that the parameter qa_salary_after_12_months is equal to salary * 2.7 from the request (get salary from the request).",
									"pm.test(\"qa_salary_after_6_months equals request salary*2.7\", function () {",
									"    pm.expect(respData.qa_salary_after_12_months).to.eql(+reqData.salary*2.7);",
									"});",
									"// 17. Check that the parameter qa_salary_after_1.5_year is equal to salary * 3.3 from the request (get salary from the request).",
									"pm.test(\"qa_salary_after_1.5_year equals request salary*3.3\", function () {",
									"    pm.expect(respData[\"qa_salary_after_1.5_year\"]).to.eql(+reqData.salary*3.3);",
									"});",
									"// 18. Check that the parameter qa_salary_after_3.5_years is equal to salary * 3.8 from the request (get salary from the request).",
									"pm.test(\"qa_salary_after_3.5_years equals request salary*3.8\", function () {",
									"    pm.expect(respData[\"qa_salary_after_3.5_years\"]).to.eql(+reqData.salary*3.8);",
									"});",
									"// 19. Check that in the person parameter, the first element of u_name is equal to the salary from the request (get salary from the request).",
									"pm.test(\"1st parameter u_name equals request salary\", function () {",
									"    pm.expect(respData.person.u_name[1]).to.eql(+reqData.salary);",
									"});",
									"// 20. Check that the parameter u_age is equal to age from the request (get age from the request).",
									"pm.test(\"parameter u_age equals request age\", function () {",
									"    pm.expect(respData.person.u_age).to.eql(+reqData.age);",
									"});",
									"",
									"// 21. Check that the parameter u_salary_5_years is equal to salary * 4.2 from the request (get salary from the request).",
									"pm.test(\"u_salary_5_years equals request salary*4.2\", function () {",
									"    pm.expect(respData.person.u_salary_5_years).to.eql(+reqData.salary*4.2);",
									"});",
									"// 22. Write a loop that will print the elements of the list from the person parameter to the console in order.",
									"for (let i in respData.person){",
									"    console.log(\"Item \" + i + \"is equal \" + respData.person[i] + \" - \" + typeof respData.person[i] )",
									"};",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_2",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_2"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}
