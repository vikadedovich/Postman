 {
	"info": {
		"_postman_id": "60c438bd-87bc-478b-8732-ac5875216ad8",
		"name": "Postman_HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19694575"
	},
	"item": [
		{
			"name": "EP_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 3. Проверить, что в body приходит правильный string",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"//3. Спарсить response body в json",
							"let respData = pm.response.json();",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками)",
							"pm.test(\"Body matches name\", function () {",
							"    pm.expect(respData.name).to.eql('Vika');",
							"});",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками)",
							"pm.test(\"Body matches age\", function () {",
							"    pm.expect(respData.age).to.eql('29');",
							"});",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками)",
							"pm.test(\"Body matches salary\", function () {",
							"    pm.expect(respData.salary).to.eql(300);",
							"});",
							"//7. Спарсить request",
							"let reqData = request.data;",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request)",
							"let req_name = reqData.name;",
							"pm.test(\"req_name and res_name are the same\", function () {",
							"    pm.expect(respData.name).to.eql(reqData.name);",
							"});",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request)",
							"pm.test(\"req_age and res_age are the same\", function () {",
							"    pm.expect(respData.age).to.eql(reqData.age);",
							"});",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request)",
							"pm.test(\"req_salary and res_salary are the same\", function () {",
							"    pm.expect(respData.salary).to.eql(+reqData.salary);",
							"});",
							"//11. Вывести в консоль параметр family из response",
							"console.log(respData.family);",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"pm.test(\"check u_salary_1_5_year is eql salary*4\", function () {",
							"    pm.expect(respData.family.u_salary_1_5_year).to.eql(reqData.salary * 4);",
							"});",
							"console.log(respData.family.u_salary_1_5_year);",
							"console.log(reqData.salary * 4);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Vika",
							"type": "text"
						},
						{
							"key": "age",
							"value": "29",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "300",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"//3. Спарсить response body в json",
							"let respData = pm.response.json();",
							"//4. Спарсить request",
							"let reqData = pm.request.url.query.toObject();",
							"//5. Проверить, что name в ответе равно name из request (name забрать из request)",
							"pm.test(\"res_name and req_name are similar\", function () {",
							"    pm.expect(respData.name).to.eql(reqData.name);",
							"});",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request)",
							"pm.test(\"res_age and req_age are the same\", function () {",
							"    pm.expect(respData.age).to.eql(respData.age);",
							"});",
							"//7. Проверить, что salary в ответе равно salary из request (salary забрать из request)",
							"pm.test(\"req_salary and res_salary are the same\", function () {",
							"    pm.expect(respData.salary).to.eql(+reqData.salary);",
							"});",
							"//8. Вывести в консоль параметр family из response",
							"console.log(respData.family);",
							"//9. Проверить, что у параметра dog есть параметры name",
							"pm.test(\"Check the dog has parametr name\", function () {",
							"    pm.expect(respData.family.pets.dog).to.have.property(\"name\");",
							"});",
							"//10. Проверить, что у параметра dog есть параметры age",
							"pm.test(\"Check the dog has parametr age\", function () {",
							"    pm.expect(respData.family.pets.dog).to.have.property(\"age\");",
							"});",
							"//11. Проверить, что параметр name имеет значение Luky",
							"pm.test(\"Check parametr name is Lucky\", function () {",
							"    pm.expect(respData.family.pets.dog.name).to.eql(\"Luky\");",
							"});",
							"//12. Проверить, что параметр age имеет значение 4",
							"pm.test(\"Check age is 4\", function () {",
							"    pm.expect(respData.family.pets.dog.age).to.eql(4);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Vika&age=29&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Vika"
						},
						{
							"key": "age",
							"value": "29"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 3. Спарсить response body в json",
							"let respData = pm.response.json();",
							"// 4. Спарсить request",
							"let reqData = pm.request.url.query.toObject();",
							"// 5. Проверить, что name в ответе равно name  из request (name забрать из request)",
							"pm.test(\"resp_name and req_name are similar\", function () {",
							"    pm.expect(respData.name).to.eql(reqData.name);",
							"});",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request)",
							"pm.test(\"resp_age and req_age are similar\", function () {",
							"    pm.expect(respData.age).to.eql(+reqData.age);",
							"});",
							"// 7. Вывести в консоль параметр salary из request",
							"console.log(reqData.salary);",
							"// 8. Вывести в консоль параметр salary из response",
							"console.log(respData.salary);",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response",
							"console.log(respData.salary[0]);",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response",
							"console.log(respData.salary[1]);",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response",
							"console.log(respData.salary[2]);",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request)",
							"pm.test(\"0th element of the resp_salary parameter is equal to req_salary\", function () {",
							"    pm.expect(respData.salary[0]).to.eql(+reqData.salary);",
							"});",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request)",
							"pm.test(\"1th element of the resp_salary parameter is equal to req_salary*2\", function () {",
							"    pm.expect(+respData.salary[1]).to.eql(reqData.salary * 2);",
							"});",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request)",
							"pm.test(\"2th element of the resp_salary parameter is equal to req_salary*3\", function () {",
							"    pm.expect(+respData.salary[2]).to.eql(reqData.salary * 3);",
							"});",
							"// 15. Создать в окружении переменную name",
							"pm.environment.set(\"name\", \"Vika\");",
							"// 16. Создать в окружении переменную age",
							"pm.environment.set(\"age\", \"29\");",
							"// 17. Создать в окружении переменную salary",
							"pm.environment.set(\"salary\", \"1000\");",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary",
							"let arr = respData.salary;",
							"arr.forEach(function(item, i, arr) {",
							"    console.log(item + \"- this is \" + i + \" item of the list\")",
							"});",
							"",
							"// for ( let i = 0; i < respData.salary.length; i++) {",
							"//    console.log(respData.salary[i]);",
							"// };",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Vika&age=29&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Vika"
						},
						{
							"key": "age",
							"value": "29"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 5. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 6. Спарсить response body в json",
							"let respData = pm.response.json();",
							"// 7. Спарсить request",
							"let reqData = request.data;",
							"// 8. Проверить, что json response имеет параметр start_qa_salary",
							"pm.test(\"response has property start_qa_salary\", function () {",
							"    pm.expect(respData).to.have.property(\"start_qa_salary\");",
							"});",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months",
							"pm.test(\"response has property qa_salary_after_6_months\", function () {",
							"    pm.expect(respData).to.have.property(\"qa_salary_after_6_months\");",
							"});",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months",
							"pm.test(\"response has property qa_salary_after_12_months\", function () {",
							"    pm.expect(respData).to.have.property(\"qa_salary_after_12_months\");",
							"});",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"pm.test(\"response has property qa_salary_after_1.5_year\", function () {",
							"    pm.expect(respData).to.have.property(\"qa_salary_after_1.5_year\");",
							"});",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"pm.test(\"response has property qa_salary_after_3.5_years\", function () {",
							"    pm.expect(respData).to.have.property(\"qa_salary_after_3.5_years\");",
							"});",
							"// 13. Проверить, что json response имеет параметр person",
							"pm.test(\"response has property person\", function () {",
							"    pm.expect(respData).to.have.property(\"person\");",
							"});",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request)",
							"pm.test(\"resp_start_qa_salary is equal req_salary\", function () {",
							"    pm.expect(respData.start_qa_salary).to.eql(+reqData.salary);",
							"});",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request)",
							"pm.test(\"resp_qa_salary_after_6_months is equal req_salary*2\", function () {",
							"    pm.expect(respData.qa_salary_after_6_months).to.eql(reqData.salary * 2);",
							"});",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request)",
							"pm.test(\"resp_qa_salary_after_12_months is equal req_salary*2.7\", function () {",
							"    pm.expect(respData.qa_salary_after_12_months).to.eql(reqData.salary*2.7);",
							"});",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request)",
							"pm.test(\"resp_qa_salary_after_1.5_year is equal req_salary*3.3\", function () {",
							"    pm.expect(respData[\"qa_salary_after_1.5_year\"]).to.eql(reqData.salary*3.3);",
							"});",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request)",
							"pm.test(\"resp_qa_salary_after_3.5_years is equal req_salary*3.8\", function () {",
							"    pm.expect(respData[\"qa_salary_after_3.5_years\"]).to.eql(reqData.salary*3.8);",
							"});",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request)",
							"pm.test(\"the 1st parametr of the person is eql req_salary\", function () {",
							"    pm.expect(respData.person.u_name[1]).to.eql(+reqData.salary);",
							"});",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request)",
							"pm.test(\" parametr u_age is eql age\", function () {",
							"    pm.expect(respData.person.u_age).to.eql(+reqData.age);",
							"});",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request)",
							"pm.test(\"resp_u_salary_5_years is equal req_salary*4.2\", function () {",
							"    pm.expect(respData.person.u_salary_5_years).to.eql(reqData.salary*4.2);",
							"});",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
							"for( let start in respData.person) {",
							"    console.log(start + \": \" + respData.person[start])};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}
